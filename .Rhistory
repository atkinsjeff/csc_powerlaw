filter(growthForm == "single bole tree" | growthForm ==   "multi-bole tree"  | growthForm ==  "small tree") -> pft
x11()
plot(pft$height, pft$maxCrownDiameter)
# bring in map data
map.files %>%
map_df(~read_csv(., col_types = cols(.default = "c"))) -> map
# filter down
map %>%
select(individualID, taxonID ) %>%
unique() -> map
# merge them together
big.boi <- merge(pft, map, by = c("individualID"))
# NEON taxons
tax.jenk <- read.csv("./data/neon_taxon_jenkins.csv")
# how many are there?
taxons <- unique(big.boi$taxonID)
taxons <- data.frame(taxons)
names(taxons)[1]<-paste("taxonID")
df2 <- merge(tax.jenk, taxons, by = "taxonID", all = TRUE)
# big one
df <- merge(big.boi, df2)
# cleaning house
df$height <- as.numeric(df$height)
df$maxCrownDiameter <- as.numeric(df$maxCrownDiameter)
df$ninetyCrownDiameter <- as.numeric(df$ninetyCrownDiameter)
df$maxBaseCrownDiameter <- as.numeric(df$maxBaseCrownDiameter)
df$ninetyBaseCrownDiameter <- as.numeric(df$ninetyBaseCrownDiameter)
#remove outlier
df %>%
filter(maxCrownDiameter < 50) %>%
data.frame() -> df
str(df)
df$pft <- as.factor(df$pft)
x11(width = 10, height = 4)
ggplot(df, aes(x = height, y = maxCrownDiameter))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Trees", limits = c(0, 8), breaks = c(0, 2, 4, 6, 8))+
xlab(expression("Height [m]"))+
ylab(expression("Max Crown Diameter [m]"))+
theme_bw()+
stat_smooth(method = "lm", color = "#444444", size = 1.5, se = FALSE)+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
x11(width = 10, height = 4)
ggplot(df, aes(x = height, y = maxCrownDiameter))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Trees", limits = c(0, 50), breaks = c(0, 2, 4, 6, 8))+
xlab(expression("Height [m]"))+
ylab(expression("Max Crown Diameter [m]"))+
theme_bw()+
stat_smooth(method = "lm", color = "#444444", size = 1.5, se = FALSE)+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
x11(width = 10, height = 4)
ggplot(df, aes(x = height, y = maxCrownDiameter))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Trees", limits = c(0, 100), breaks = c(0, 20, 40, 60, 80, 100))+
xlab(expression("Height [m]"))+
ylab(expression("Max Crown Diameter [m]"))+
theme_bw()+
stat_smooth(method = "lm", color = "#444444", size = 1.5, se = FALSE)+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
df %>%
filter(pft == "ENF" | pft == "DBF") ->df3
x11(width = 10, height = 4)
ggplot(df3, aes(x = height, y = maxCrownDiameter))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Trees", limits = c(0, 100), breaks = c(0, 20, 40, 60, 80))+
xlab(expression("Height [m]"))+
ylab(expression("Max Crown Diameter [m]"))+
theme_bw()+
stat_smooth(method = "lm", color = "#444444", size = 1.5, se = FALSE)+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
x11(width = 4, height = 4)
ggplot(cst, aes(x = moch, y = rugosity))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Plots" )+
xlab("MOCH [m]")+
ylab(expression("R"[c]*{}*" [m]"))+
theme_bw()+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))
ggplot(cst, aes(x = log10(can_max_ht), y = log10(rugosity), fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("H"[Max]*{}*" [m]"))+
ylab(expression("R"[c]*{}*" [m]"))+
theme_light()+
geom_smooth(data = subset(cst, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(cst, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(cst, pft == "MF"),
method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
require(RColorBrewer)
ggplot(df3), aes(x = height, y = maxCrownDiameter, fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("Height [m]"))+
ylab(expression("Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(cst, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(cst, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
x11()
ggplot(df3, aes(x = height, y = maxCrownDiameter, fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("Height [m]"))+
ylab(expression("Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
# make area
df$crownArea <- pi * (maxCrownDiameter / 2) * (ninetyCrownDiameter / 2)
# make area
df$crownArea <- pi * (df$maxCrownDiameter / 2) * (df$ninetyCrownDiameter / 2)
ggplot(df3, aes(x = height, y = crownArea, fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("Height [m]"))+
ylab(expression("Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
# make area
df$crownArea <- pi * (df$maxCrownDiameter / 2) * (df$ninetyCrownDiameter / 2)
x11()
ggplot(df3, aes(x = height, y = crownArea, fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("Height [m]"))+
ylab(expression("Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
df3$crownArea <- pi * (df3$maxCrownDiameter / 2) * (df3$ninetyCrownDiameter / 2)
x11()
ggplot(df3, aes(x = height, y = crownArea, fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("Height [m]"))+
ylab(expression("Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
x11()
ggplot(df3, aes(x = log(height), y = log(crownArea), fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("Height [m]"))+
ylab(expression("Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
x11(width = 4, height = 4)
ggplot(df3, aes(x = log(height), y = log(crownArea), fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("ln Height [m]"))+
ylab(expression(" ln Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
head(df3)
# make area
df3$baseCrownArea <- pi * (df3$maxBaseCrownDiameter / 2) * (df3$ninetyBaseCrownDiameter / 2)
x11(width = 4, height = 4)
ggplot(df3, aes(x = log(height), y = log(baseCrownArea), fill = pft, alpha = pft))+
geom_point(size = 2, shape = 21)+
scale_fill_brewer(palette = "Dark2")+
scale_alpha_manual(values = c(0.5, 0.5, 0.5), guide = FALSE)+
xlab(expression("ln Height [m]"))+
ylab(expression(" ln Crown Diameter [m]"))+
theme_light()+
geom_smooth(data = subset(df3, pft == "DBF"),
method = lm, se = FALSE, color = "#1B9E77", size = 2, show.legend = FALSE)+
geom_smooth(data = subset(df3, pft == "ENF"),
method = lm, se = FALSE, color = "#D95F02", size = 2, show.legend = FALSE)+
# geom_smooth(data = subset(cst, pft == "MF"),
#             method = lm, se = FALSE, color = "#7570B3", size = 2, show.legend = FALSE)+
theme(legend.justification = c(0.98, 0),
legend.position = c(0.98, 0.01),
legend.title = element_blank(),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"),
legend.text = element_text(size = 12))
head(df3)
require(ggplot2)
require(tidyverse)
require(cowplot)
require(gridExtra)
require(maps)
require(ggrepel)
require(viridis)
require(maptools)
require(mapproj)
require(rgeos)
require(rgdal)
require(usmap)
require(scatterpie)
# data
csc <- read.csv("./data/pcl_output_20201109.csv")
#pft <- read.csv("neon_pft_plots.csv")
csc$pft[csc$pft == "BDF"] <- "DBF"
#
unique(csc$siteID)
csc %>%
filter(cover.fraction > 25) %>%
filter(can.max.ht < 50) %>%
filter(management == "unmanaged") %>%
filter(disturbance == "") %>%
filter(plotID != "?" & plotID != "") %>%
select(siteID, plotID, transect.length, pft, moch, can.max.ht, rugosity,
enl, fhd) %>%
group_by(plotID, siteID, pft) %>%
summarise_at(.vars = vars(moch, can.max.ht, rugosity, enl, fhd),
.funs = "mean") %>%
data.frame() -> cst
names(cst) <- gsub(x = names(cst), pattern = "\\.", replacement = "_")
# csc %>%
#   group_by(siteID) %>%
#   summarize(sum(transect.length)) %>%
#   data.frame()  -> site.table
cst %>%
group_by(siteID) %>%
summarize(plots = n_distinct(plotID)) %>%
data.frame()  -> site.table
pft.table <- data.frame(cst$siteID, cst$pft)
# bring in site metadata
site.meta <- read.csv("./data/pcl_site_metadata_powerlaw.csv")
# merge for map making
site.table <- merge(site.table, site.meta)
# map script
map_data("world") %>%
filter(region == "USA") -> US
US <- map_data("state")
# shorten
site.table %>%
select(longitude, latitude, siteID, plots) %>%
data.frame() -> map.df
# change names
names(map.df)[1] <- "lon"
names(map.df)[2] <- "lat"
names(map.df)[4] <- "no_plots"
map.df <- na.omit(map.df)
map.df <- usmap_transform(map.df)
x11()
ggplot()+
geom_polygon(data = US, aes(x = long, y = lat, group = group),
fill = "grey", alpha = 0.3)+
geom_point(data =  map.df, aes(x = lon, y = lat, size = transect_length, color = transect_length))+
theme_void()+
scale_size_continuous()+
scale_color_viridis()
x11()
plot_usmap(exclude = c( .west_region, .west_south_central, .west_north_central),
fill = "#eeeded", color = "black")+
geom_point(data =  map.df, aes(x = lon.1, y = lat.1), size = 3, color = "black")+
theme_void()+
geom_label_repel(data = map.df, aes(x = lon.1, y = lat.1, label = siteID),
size = 3, alpha = 1, segment.colour = "black", segment.size = 1,
seed = 666)+
labs(title = "Field Sites Surveyed")
###### cool dope ridge plots
library(dplyr)
library(forcats)
library(ggridges)
x11()
p1 <- ggplot(cst, aes(y = siteID))+
geom_density_ridges(aes(x = rugosity, fill = pft),
alpha = 0.8, color = "white")+
labs(
x = "Rugosity [m]",
y = "Site",
title = "Complexity by Site")+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0))+
scale_fill_manual(
breaks = c("DBF", "ENF", "MF"),
labels = c("DBF", "ENF", "MF"),
values = c("DBF" = "#1B9E77",
"ENF" = "#D95F02",
"MF" = "#7570B3"))+
theme_ridges(grid = FALSE)
p2 <- ggplot(cst, aes(y = siteID))+
geom_density_ridges(aes(x = can_max_ht, fill = pft),
alpha = 0.8, color = "white")+
labs(
x = "Max Canopy Height [m]",
y = "Site",
title = "Max Canopy Height by Site")+
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0))+
scale_fill_manual(
breaks = c("DBF", "ENF", "MF"),
labels = c("DBF", "ENF", "MF"),
values = c("DBF" = "#1B9E77",
"ENF" = "#D95F02",
"MF" = "#7570B3"))+
theme_ridges(grid = FALSE)
require(cowplot)
x11(width = 10, height = 6)
plot_grid(p1, p2, labels =  c("B", "C"), label_size = 12)
####
############################ TILE PLOTS
geom_smooth(data = subset(cst, pft == "DBF"),
method = lm, se = FALSE)+
p1 <-
x11(width = 10, height = 4)
ggplot(cst, aes(x = can_max_ht, y = rugosity))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Plots" )+
xlab(expression("H"[Max]*{}*" [m]"))+
ylab(expression("R"[c]*{}*" [m]"))+
theme_bw()+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
x11(width = 10, height = 4)
ggplot(cst, aes(x = can_max_ht, y = fhd))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Plots" )+
xlab(expression("H"[Max]*{}*" [m]"))+
ylab(expression("FHD"))+
theme_bw()+
theme(legend.justification = c(0.99, 0.01), legend.position = c(0.99, 0.01),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
x11(width = 10, height = 4)
ggplot(cst, aes(x = can_max_ht, y = enl))+
geom_bin2d(bins = 25, color = "white")+
scale_fill_gradient(low = "#00AFBB", high = "#FC4E07", name = "No. of Plots", limits = c(0, 8), breaks = c(0, 2, 4, 6, 8))+
xlab(expression("H"[Max]*{}*" [m]"))+
ylab(expression("ENL"))+
theme_bw()+
stat_smooth(method = "lm", color = "#444444", size = 1.5, se = FALSE)+
theme(legend.justification = c(0.01, 0.98), legend.position = c(0.01, 0.98),
legend.background = element_rect(linetype = 1, size = 0.5, color = "black"))+
facet_grid(.~pft)
####### #LAYERING LINEAR MODELS
cst %>%
filter(pft == "ENF") %>%
data.frame() -> enf
summary(lm(enl ~ can_max_ht, data = enf))
cst %>%
filter(pft == "DBF") %>%
data.frame() -> DBF
summary(lm(enl ~ can_max_ht, data = DBF))
cst %>%
filter(pft == "MF") %>%
data.frame() -> mf
summary(lm(enl ~ can_max_ht, data = mf))
predict(lm.enf, enf, interval="confidence")
cst %>%
filter(pft == "ENF") %>%
data.frame() -> enf
summary(lm(enl ~ can_max_ht, data = enf)) -> lm.enf
predict(lm.enf, enf, interval="confidence")
predict(lm(enl ~ can_max_ht, data = enf), enf, interval="confidence")
confint(lm(enl ~ can_max_ht, data = enf))
head(DBF)
summary(lm(enl ~ can_max_ht, data = DBF))
summary(lm(rugosity ~ can_max_ht, data = DBF))
confint(lm(enl ~ can_max_ht, data = DBF))
confint(lm(rugosity ~ can_max_ht, data = DBF))
summary(lm(log10(rugosity) ~ log10(can_max_ht), data = DBF))
#confint(lm(enl ~ can_max_ht, data = DBF))
confint(lm(log10(rugosity) ~ log10(can_max_ht), data = DBF))
2.497-23.36
2.497-2.36
2.63-2.497
confint(lm(log10(enl) ~ log10(can_max_ht), data = DBF))
0.88-0.79
confint(lm(log10(fhd) ~ log10(moch), data = cst))
0.309-0.293
confint(lm(log10(enl) ~ log10(moch), data = enf))
summary(m(log10(enl) ~ log10(moch), data = enf))
summary(lm(log10(enl) ~ log10(moch), data = enf))
0.59-0.469
confint(lm(log10(enl) ~ log10(moch), data = DBF))
summary(lm(log10(enl) ~ log10(moch), data = DBF))
confint(lm(log10(enl) ~ log10(moch), data = DBF))
0.9418-0892
0.9418-0.892
summary(lm(log10(rugosity) ~ log10(moch), data = enf))
summary(lm(log10(enl) ~ log10(moch), data = DBF))
confint(lm(log10(enl) ~ log10(moch), data = DBF))
summary(lm(log10(rugosity) ~ log10(moch), data = enf))
confint(lm(log10(rugosity) ~ log10(moch), data = enf))
2.62-2.26
summary(lm(log10(rugosity) ~ log10(can_max_ht), data = enf))
confint(lm(log10(rugosity) ~ log10(can_max_ht), data = enf))
.3.80-3.37
3.80-3.37
summary(lm(log10(enl) ~ log10(can_max_ht), data = enf))
confint(lm(log10(enl) ~ log10(can_max_ht), data = enf))
0.91-0.70
summary(lm(log10(fhd) ~ log10(can_max_ht), data = enf))
confint(lm(log10(fhd) ~ log10(can_max_ht), data = enf))
0.43-0.35
summary(lm(log10(rugosity) ~ log10(moch), data = mf))
confint(lm(log10(rugosity) ~ log10(moch), data = mf))
2.33-2.03
summary(lm(log10(fhd) ~ log10(moch), data = mf))
confint(lm(log10(fhd) ~ log10(mocht), data = mf))
confint(lm(log10(fhd) ~ log10(moch), data = mf))
summary(lm(log10(fhd) ~ log10(moch), data = mf))
confint(lm(log10(fhd) ~ log10(moch), data = mf))
0.288-0.263
summary(lm(log10(fhd) ~ log10(can_max_ht), data = mf))
confint(lm(log10(fhd) ~ log10(can_max_ht), data = mf))
0.453-0.404
summary(lm(log10(fhd) ~ log10(can_max_ht), data = mf))
confint(lm(log10(fhd) ~ log10(can_max_ht), data = mf))
summary(lm(log10(enl) ~ log10(can_max_ht), data = mf))
confint(lm(log10(enl) ~ log10(can_max_ht), data = mf))
1.193-1.017
summary(lm(log10(rugosity) ~ log10(can_max_ht), data = mf))
confint(lm(log10(rugosity) ~ log10(can_max_ht), data = mf))
3.79 - 3.40
summary(aov.pft <- aov(log10(rugosity) ~ log10(can_max_ht) + pft, data = cst))
TukeyHSD(aov.pft, "pft")
summary(aov.fhd <- aov(log10(fhd) ~ log10(can_max_ht) + pft, data = cst))
TukeyHSD(aov.fhd, "pft")
# differences among PFT
summary(aov.pft <- aov(log10(rugosity) ~ log10(can_max_ht) + pft, data = cst))
TukeyHSD(aov.pft, "pft")
head(types)
confint(lm(log10(rugosity) ~ log10(can_max_ht), data = DBF))
confint(lm(log10(fhd) ~ log10(moch), data = cst))
?st_apply
